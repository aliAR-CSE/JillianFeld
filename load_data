# ECOR 1042 Lab 3 - Team submission
# Remember to include docstring and type annotations for your functions

# Update "" to list all students contributing to the team work
__author__ = ""

# Update "" with your team (e.g. T102)
__team__ = "T-15"

#==========================================#
# Place your student_school_list function after this line

def student_school_list(filename: str, schoolname: str) -> list:
  """Return a list of all the students and there associated attributes
  with a file name an initals of the school school.
  Precondition: The file path must exist in, file format must be
  contain a header with the attributes.
  """
  list_of_allstudents = []
  students_in_school = []
  with open(filename, 'r') as file_of_students:
      for student in file_of_students:

          list_of_allstudents += [student.strip().split(',')]
      attribute_list = list_of_allstudents[0] 
      for i in range(1,len(list_of_allstudents)):
          if list_of_allstudents[i][0] == schoolname:
              student_in_school_attributes = {}

              for j in range(1,len(attribute_list)):
                  student_in_school_attributes[attribute_list[j]] = int(list_of_allstudents[i][j])
              students_in_school.append(student_in_school_attributes)
  return students_in_school
#==========================================#
# Place your student_health_list function after this line

def student_health_list(filename: str, health: str) -> list:
  """
  This function takes a file name containing student data and a health value as input, and returns a list of students (each represented as a dictionary) whose health equals the provided health_value. If the health_value is not found, an empty list is returned.

  Preconditions: filename exists

  Examples:
  >>> student_health_list('student-mat.csv', 2)

  [{'School': 'MS', 'Age': 20, 'StudyTime': 1.2, 'Failures': 1, 'Absences': 10, 'G1': 9, 'G2': 11, 'G3': 7},
  {another element}
  ...
  ]

  >>> student_health_list('student-mat.csv', -10)
  []

  """

  # Open the file for reading
  file = open(filename, "r")
  row = 0
  column_headers = []
  students_equal_health = []

  # Iterate over each line in the file
  for line in file:

      # Split and strip each line to separate fields
      lines = line.replace("\n","").split(',')

      # First row contains headers
      if row == 0:
          column_headers = lines

      else:
          # Check if the health score matches the specified score
          if (int(lines[4]) == int(health)):

              student = {}              
              student[column_headers[0]] = lines[0]       # School (string)
              student[column_headers[1]] = int(lines[1])  # Age (integer)
              student[column_headers[2]] = int(lines[2])  # StudyTime (integer)
              student[column_headers[3]] = int(lines[3])  # Failures (integer)
              student[column_headers[5]] = int(lines[5])  # Absences (integer)
              student[column_headers[6]] = int(lines[6])  # G1 (integer)
              student[column_headers[7]] = int(lines[7])  # G2 (integer)
              student[column_headers[8]] = int(lines[8])  # G3 (integer)

              # Add the student's dictionary to the list of students with the specified health score
              students_equal_health.append(student)
      row +=1
  # Close the file and return the list of matching students
  file.close()

  return students_equal_health

#==========================================#
# Place your student_age_list function after this line


#==========================================#
# Place your student_failures_list function after this line


#==========================================#
# Place your load_data function after this line

def load_data(filename: str, filter):
    """

    Preconditions: filename exists
    """
    
    if filter[0].lower() == 'school':
        return student_school_list(filename,filter[1])
    
    #If the user wants to filter by health
    elif filter[0].lower() == 'health':
        return student_health_list(filename, filter[1])

    # If the user wants to filter by age
    elif filter[0].lower() == 'age':
        return student_age_list(filename, filter[1])

    # If the user wants to filter by failiures
    elif filter[0].lower() == 'failiures':
        return student_failures_list(filename,filter[1])

    # If the user wants to print a list of all students and all attributes
    elif filter[0].lower() == 'all':
        
        # Open the file for reading
        file = open(filename, "r")
        row = 0
        column_headers = []
        list_all_students = []

        # Iterate over each line in the file
        for line in file:

            # Split and strip each line to separate fields
            lines = line.replace("\n","").split(',')

            # First row contains headers
            if row == 0:
                 column_headers = lines

            else:
                student = {}              
                student[column_headers[0]] = lines[0]       # School (string)
                student[column_headers[1]] = int(lines[1])  # Age (integer)
                student[column_headers[2]] = int(lines[2])  # StudyTime (integer)
                student[column_headers[3]] = int(lines[3])  # Failures (integer)
                student[column_headers[4]] = int(lines[4])  # Health (integer)
                student[column_headers[5]] = int(lines[5])  # Absences (integer)
                student[column_headers[6]] = int(lines[6])  # G1 (integer)
                student[column_headers[7]] = int(lines[7])  # G2 (integer)
                student[column_headers[8]] = int(lines[8])  # G3 (integer)

                # Add the student's dictionary to the list of students with the specified health score
                list_all_students.append(student)
            
            row += 1
          
        # Close the file and return the list of matching students
        file.close()

        return list_all_students

    # Invalid input
    else:
        print('Invalid filter') 
        return []
        
print(load_data("student-mat.csv",('All',)))

#==========================================#
# Place your add_average function after this line
